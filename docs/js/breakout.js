// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.7.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, _s5_);
      return new A.RangeError(null, null, true, index, _s5_, "Value not in range");
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpressionWithWrapper(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found."));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this.__js_helper$_next = null;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return A.evaluateRtiForRecord(object.$recipe, object._getFieldValues$0());
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var kind = testRti._kind,
        t1 = true;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = typeParametersText + typeSep + genericContext[t4];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(rti._primary, genericContext);
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv, false))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      A._TimerImpl$(0, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _schedulePriorityAsyncCallback(callback) {
      var newEntry, lastCallback, entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        newEntry = new A._AsyncCallbackEntry(callback);
        lastCallback = $._lastCallback;
        if (lastCallback == null) {
          $._nextCallback = $._lastCallback = newEntry;
          if (!$._isInCallbackLoop)
            $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
        } else
          $._lastCallback = lastCallback.next = newEntry;
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    StreamController_StreamController$broadcast($T) {
      return new A._AsyncBroadcastStreamController(null, $T._eval$1("_AsyncBroadcastStreamController<0>"));
    },
    Timer_Timer$periodic(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(callback));
      return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1) {
      var _ = this;
      _.onCancel = t0;
      _._async$_state = 0;
      _._lastSubscription = _._firstSubscription = null;
      _.$ti = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._cell = _set._first;
      return t1;
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, $E) {
      var t1, result, i;
      if ($length > 4294967295)
        A.throwExpression(A.RangeError$range($length, 0, 4294967295, "length", null));
      t1 = A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      result = t1;
      if ($length !== 0)
        for (t1 = result.length, i = 0; i < t1; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1, _i,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        B.JSArray_methods.add$1(list, $E._as(elements[_i]));
      list.$flags = 1;
      return list;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    Duration$(milliseconds) {
      return new A.Duration(1000 * milliseconds);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message) {
      return new A.ArgumentError(false, null, null, message);
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    IndexError$withLength(invalidValue, $length, indexable, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = B.JSInt_methods.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = B.JSInt_methods.get$hashCode(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = B.JSInt_methods.get$hashCode(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _JSRandom: function _JSRandom() {
    },
    Cell: function Cell(t0, t1, t2, t3) {
      var _ = this;
      _.row = t0;
      _.column = t1;
      _.character = t2;
      _.color = t3;
    },
    KeyboardData: function KeyboardData(t0) {
      this.keyCode = t0;
    },
    MouseData: function MouseData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.row = t0;
      _.column = t1;
      _.character = t2;
      _.color = t3;
      _.pixelRow = t4;
      _.pixelColumn = t5;
      _.pixelIsOn = t6;
    },
    Position: function Position(t0, t1) {
      var _ = this;
      _.rows = t0;
      _.columns = t1;
      _._column = _._row = 0;
    },
    Screen$(backgroundColor, container, defaultColor, heightInPixels, isInteractive, pixelHeight, pixelWidth, widthInPixels) {
      var t4, _this0, _,
        t1 = self,
        t2 = type$.JSObject,
        _this = t2._as(t2._as(t1.document).createElement("canvas")),
        t3 = widthInPixels * pixelWidth;
      _this.width = t3;
      t4 = heightInPixels * pixelHeight;
      _this.height = t4;
      _this0 = t2._as(t2._as(t1.document).createElement("canvas"));
      _this0.width = t3;
      _this0.height = t4;
      t4 = A._setArrayType([], type$.JSArray_Uint32List);
      for (_ = 0; _ < heightInPixels; ++_) {
        t1 = B.JSInt_methods._tdivFast$1(widthInPixels, 32);
        t4.push(new Uint32Array(t1 + 1));
      }
      t1 = new A.Screen(true, heightInPixels, widthInPixels, pixelWidth, pixelHeight, defaultColor, backgroundColor, _this, _this0, t4);
      t1.Screen$8$backgroundColor$container$defaultColor$heightInPixels$isInteractive$pixelHeight$pixelWidth$widthInPixels(backgroundColor, container, defaultColor, heightInPixels, true, pixelHeight, pixelWidth, widthInPixels);
      return t1;
    },
    Screen__findBit(pixelColumn) {
      return new A._Record_2(B.JSInt_methods._tdivFast$1(pixelColumn, 32), 31 - B.JSInt_methods.$mod(pixelColumn, 32));
    },
    Screen: function Screen(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.isInteractive = t0;
      _.heightInPixels = t1;
      _.widthInPixels = t2;
      _.pixelWidth = t3;
      _.pixelHeight = t4;
      _.defaultColor = t5;
      _.backgroundColor = t6;
      _._canvas = t7;
      _._buffer = t8;
      _._data = t9;
      _._documentHasFocus = true;
    },
    Screen_closure: function Screen_closure(t0) {
      this.$this = t0;
    },
    Screen_closure0: function Screen_closure0(t0) {
      this.$this = t0;
    },
    Screen_closure1: function Screen_closure1(t0) {
      this.$this = t0;
    },
    Screen_closure2: function Screen_closure2(t0) {
      this.$this = t0;
    },
    Screen__poke_closure: function Screen__poke_closure() {
    },
    Mode: function Mode(t0) {
      this._name = t0;
    },
    Terminal$(columns, container, rowGap, rows, whenKeyIsPressed, whenKeyIsReleased) {
      var t3, r, t4, c, _s5_ = "white", _null = null,
        t1 = A.Screen$("black", container, _s5_, rows * (8 + rowGap), true, 2, 2, columns * 8),
        t2 = A._setArrayType([], type$.JSArray_List_Cell);
      for (t3 = type$.JSArray_Cell, r = 0; r < rows; ++r) {
        t4 = A._setArrayType([], t3);
        for (c = 0; c < columns; ++c)
          t4.push(new A.Cell(r, c, " ", _s5_));
        t2.push(t4);
      }
      t1 = new A.Terminal(rows, columns, rowGap, container, t1, new A.Position(rows, columns), new A.Position(rows, columns), new A.Position(rows, columns), A.StreamController_StreamController$broadcast(type$.String), A.StreamController_StreamController$broadcast(type$.KeyboardData), A.StreamController_StreamController$broadcast(type$.MouseData), B.State_0, t2, A.LinkedHashSet_LinkedHashSet$_empty(type$.Cell), B.Map_SkDpb);
      t1.Terminal$17$backgroundColor$columns$container$defaultColor$fontData$isInteractive$pixelHeight$pixelWidth$rowGap$rows$scrolls$whenKeyIsPressed$whenKeyIsReleased$whenMouseEntersTerminal$whenMouseIsClicked$whenMouseIsMoved$whenMouseLeavesTerminal("black", columns, container, _s5_, _null, true, 2, 2, rowGap, rows, true, whenKeyIsPressed, whenKeyIsReleased, _null, _null, _null, _null);
      return t1;
    },
    State: function State(t0) {
      this._name = t0;
    },
    Terminal: function Terminal(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _.rows = t0;
      _.columns = t1;
      _.rowGap = t2;
      _.container = t3;
      _.__Terminal_screen_F = t4;
      _.currentPosition = t5;
      _._startPosition = t6;
      _._endPosition = t7;
      _._inputBroadcaster = t8;
      _._keyBroadcaster = t9;
      _._mouseBroadcaster = t10;
      _._state = t11;
      _._cells = t12;
      _._cellsToBeUpdated = t13;
      _._fontData = t14;
      _._cursorIsShowing = false;
    },
    Terminal_getMouseData: function Terminal_getMouseData(t0) {
      this.$this = t0;
    },
    Terminal_getKeyboardData: function Terminal_getKeyboardData() {
    },
    Terminal_getInputString: function Terminal_getInputString(t0) {
      this.$this = t0;
    },
    Terminal_closure: function Terminal_closure(t0) {
      this.$this = t0;
    },
    Terminal_closure0: function Terminal_closure0(t0) {
      this.$this = t0;
    },
    Terminal_closure1: function Terminal_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.whenKeyIsPressed = t1;
      _.getKeyboardData = t2;
      _.getInputString = t3;
    },
    Terminal_closure2: function Terminal_closure2(t0, t1, t2) {
      this.$this = t0;
      this.getMouseData = t1;
      this.whenMouseIsClicked = t2;
    },
    Terminal_closure3: function Terminal_closure3(t0, t1, t2) {
      this.$this = t0;
      this.whenKeyIsReleased = t1;
      this.getKeyboardData = t2;
    },
    Terminal_closure4: function Terminal_closure4(t0) {
      this.$this = t0;
    },
    Game$() {
      var t3, _, t4, _0,
        t1 = type$.JSObject,
        t2 = type$.nullable_JSObject._as(t1._as(self.document).querySelector("#breakout"));
      t1 = t2 == null ? t1._as(t2) : t2;
      t1 = A.Terminal$(60, t1, 0, 30, new A.Game_terminal_closure(), new A.Game_terminal_closure0());
      t2 = A._setArrayType([], type$.JSArray_List_int);
      for (t3 = type$.JSArray_int, _ = 0; _ < 30; ++_) {
        t4 = A._setArrayType([], t3);
        for (_0 = 0; _0 < 60; ++_0)
          t4.push(0);
        t2.push(t4);
      }
      t3 = new A.Paddle();
      t3.row = 27;
      t3.column = 30;
      t4 = A._setArrayType([], type$.JSArray_Ball);
      for (_ = 0; _ < 5; ++_)
        t4.push(new A.Ball());
      t1 = new A.Game(B.C__JSRandom, t1, t2, t3, t4);
      A.Timer_Timer$periodic(A.Duration$(25), t1.get$loop());
      t1.createBall$2$column$row(30, 15);
      return t1;
    },
    main() {
      A.Game$().setupLevel$0();
    },
    Ball: function Ball() {
      var _ = this;
      _.delayCount = _.dColumn = _.dRow = _.column = _.row = 0;
      _.isActive = false;
    },
    Paddle: function Paddle() {
      this.column = this.row = 0;
    },
    Game: function Game(t0, t1, t2, t3, t4) {
      var _ = this;
      _.rand = t0;
      _.terminal = t1;
      _.score = _.blocks = 0;
      _.data = t2;
      _.paddle = t3;
      _.balls = t4;
      _.ballPointer = -1;
    },
    Game_terminal_closure: function Game_terminal_closure() {
    },
    Game_terminal_closure0: function Game_terminal_closure0() {
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    _functionToJS0(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function."));
      result = function(_call, f) {
        return function() {
          return _call(f);
        };
      }(A._callDartFunctionFast0, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function."));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast0(callback) {
      return type$.Function._as(callback).call$0();
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.SentinelValue.prototype = {};
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.$index(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.FixedLengthListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = _this.internalComputeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [_this.__js_helper$_newLinkedCell$2(key, value)];
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this.__js_helper$_newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else
        _this.__js_helper$_last = _this.__js_helper$_last.__js_helper$_next = cell;
      ++_this.__js_helper$_length;
      _this.__js_helper$_modifications = _this.__js_helper$_modifications + 1 & 1073741823;
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.LinkedHashMapCell.prototype = {};
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 6
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 7
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 8
  };
  A._Record.prototype = {
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        result = A._setArrayType(new Array(arity), type$.JSArray_Object);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      result = A.List_List$from(result, false, type$.Object);
      result.$flags = 3;
      return result;
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_rqD;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeTypedData.prototype = {};
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_9dB;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {$isIterable: 1, $isList: 1};
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_9Kz;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_9Kz;
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_s5h;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O8Z;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_rFV;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_kmP;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_kmP;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_04U;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_8Eb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isTrustedGetRuntimeType: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(__wc0_formal) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 9
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 10
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    $signature: 1
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 0
  };
  A._BroadcastStreamController.prototype = {$isStreamController: 1};
  A._AsyncBroadcastStreamController.prototype = {};
  A._AsyncCallbackEntry.prototype = {};
  A._Zone.prototype = {};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._RootZone.prototype = {
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    }
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._modifications, _this.$ti._eval$1("_LinkedHashSetIterator<1>"));
      t1._cell = _this._first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      _this.$ti._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      _this.$ti._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = J.get$hashCode$(element) & 1073741823;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    _addHashTableEntry$2(table, element) {
      this.$ti._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(_this.$ti._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._cell = cell._next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 11
  };
  A.SetBase.prototype = {
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    toString$0(_) {
      var minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000);
      microseconds %= 3600000000;
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return "" + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    }
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {};
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    $isRandom: 1
  };
  A.Cell.prototype = {
    get$hashCode(_) {
      var t1 = this.row,
        t2 = this.column;
      return A.Object_hash(new A._Record_2(t1, t2).$shape, t1, t2, B.C_SentinelValue);
    },
    $eq(_, other) {
      var t1, t2, t3, t4;
      if (other == null)
        return false;
      if (other instanceof A.Cell) {
        t1 = other.row;
        t2 = other.column;
        t3 = this.row;
        t4 = this.column;
        t4 = A.Object_hash(new A._Record_2(t1, t2).$shape, t1, t2, B.C_SentinelValue) === A.Object_hash(new A._Record_2(t3, t4).$shape, t3, t4, B.C_SentinelValue);
        t1 = t4;
      } else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      var _this = this;
      return "(" + _this.row + " " + _this.column + ") => '" + _this.character + "' " + _this.color;
    }
  };
  A.KeyboardData.prototype = {};
  A.MouseData.prototype = {
    toString$0(_) {
      var _this = this;
      return "               row: " + _this.row + "\n            column: " + _this.column + "\n         character: '" + _this.character + "'\n    characterColor: " + _this.color + "\n\n          pixelRow: " + _this.pixelRow + "\n       pixelColumn: " + _this.pixelColumn + "\n         pixelIsOn: " + _this.pixelIsOn + "\n    ";
    }
  };
  A.Position.prototype = {
    set$column(value) {
      var t1, t2, t3, _this = this;
      if (value < 0) {
        t1 = _this._column = value;
        for (t2 = _this.columns, t3 = _this.rows; t1 < 0;) {
          t1 += t2;
          _this._column = t1;
          _this._row = B.JSInt_methods.$mod(_this._row - 1, t3);
        }
      } else {
        t1 = _this.columns;
        _this._row = B.JSInt_methods.$mod(_this._row + B.JSInt_methods.$tdiv(value, t1), _this.rows);
        _this._column = B.JSInt_methods.$mod(value, t1);
      }
    },
    get$index() {
      return this._row * this.columns + this._column;
    },
    set$index(value) {
      var _this = this,
        t1 = _this.columns;
      _this._row = B.JSInt_methods.$mod(B.JSInt_methods.$tdiv(value, t1), _this.rows);
      _this._column = B.JSInt_methods.$mod(value, t1);
    }
  };
  A.Screen.prototype = {
    Screen$8$backgroundColor$container$defaultColor$heightInPixels$isInteractive$pixelHeight$pixelWidth$widthInPixels(backgroundColor, container, defaultColor, heightInPixels, isInteractive, pixelHeight, pixelWidth, widthInPixels) {
      var t3, _this = this,
        t1 = type$.JSObject,
        t2 = t1._as(self.document);
      t2.onfocus = A._functionToJS0(new A.Screen_closure(_this));
      t2.onblur = A._functionToJS0(new A.Screen_closure0(_this));
      t2 = _this._canvas;
      t2.tabIndex = -1;
      t1._as(t2.style).display = "block";
      t1._as(t2.style).outline = "none";
      t3 = type$.nullable_JSObject._as(t2.getContext("2d"));
      if (t3 == null)
        t3 = t1._as(t3);
      t3.imageSmoothingEnabled = false;
      t2.onfocus = A._functionToJS0(new A.Screen_closure1(_this));
      t2.onblur = A._functionToJS0(new A.Screen_closure2(_this));
      t1._as(container.style).display = "flex";
      t1._as(container.style).alignItems = "flex-start";
      t1._as(container.style).padding = "0";
      t1._as(container.style).margin = "0";
      t1._as(container.style).width = "fit-content";
      t1._as(container.style).height = "fit-content";
      t1._as(container.style).background = "gray";
      t1._as(container.appendChild(t2));
      _this.clear$0(0);
    },
    _wrapped$2(pixelRow, pixelColumn) {
      return new A._Record_2(B.JSInt_methods.$mod(pixelRow, this.heightInPixels), B.JSInt_methods.$mod(pixelColumn, this.widthInPixels));
    },
    _clearBuffer$0() {
      var t1 = this._buffer,
        t2 = type$.nullable_JSObject._as(t1.getContext("2d"));
      if (t2 == null)
        t2 = type$.JSObject._as(t2);
      t2.save();
      t2.beginPath();
      t2.clearRect(0, 0, A._asInt(t1.width), A._asInt(t1.height));
      t2.restore();
      return t2;
    },
    _copyBufferToCanvas$0() {
      var t1 = type$.nullable_JSObject._as(this._canvas.getContext("2d"));
      if (t1 == null)
        t1 = type$.JSObject._as(t1);
      t1.save();
      t1.beginPath();
      t1.drawImage(this._buffer, 0, 0);
      t1.restore();
      return t1;
    },
    _setPixelOff$4(pixelRow, pixelColumn, destination, wrap) {
      var _0_0, _1_0, index, bit, t2, t3, _this = this,
        t1 = pixelRow < 0 || pixelRow >= _this.heightInPixels || pixelColumn < 0 || pixelColumn >= _this.widthInPixels;
      if (t1)
        return;
      _0_0 = _this._wrapped$2(pixelRow, pixelColumn);
      pixelRow = _0_0._0;
      pixelColumn = _0_0._1;
      _1_0 = A.Screen__findBit(pixelColumn);
      index = _1_0._0;
      bit = B.JSInt_methods.$shl(1, _1_0._1);
      t1 = _this._data;
      if (!(pixelRow >= 0 && pixelRow < t1.length))
        return A.ioore(t1, pixelRow);
      t1 = t1[pixelRow];
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      t2 = t1[index];
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t1[index] = (t2 | bit) >>> 0;
      t1[index] = (t1[index] ^ bit) >>> 0;
      t1 = type$.nullable_JSObject._as(destination.getContext("2d"));
      if (t1 == null)
        t1 = type$.JSObject._as(t1);
      t1.save();
      t1.beginPath();
      t1.fillStyle = _this.backgroundColor;
      t2 = _this.pixelWidth;
      t3 = _this.pixelHeight;
      t1.fillRect(pixelColumn * t2, pixelRow * t3, t2, t3);
      t1.restore();
    },
    _setPixelOn$5(pixelRow, pixelColumn, color, destination, wrap) {
      var _0_0, _1_0, index, bit, t2, t3, _this = this,
        t1 = pixelRow < 0 || pixelRow >= _this.heightInPixels || pixelColumn < 0 || pixelColumn >= _this.widthInPixels;
      if (t1)
        return;
      _0_0 = _this._wrapped$2(pixelRow, pixelColumn);
      pixelRow = _0_0._0;
      pixelColumn = _0_0._1;
      _1_0 = A.Screen__findBit(pixelColumn);
      index = _1_0._0;
      bit = B.JSInt_methods.$shl(1, _1_0._1);
      t1 = _this._data;
      if (!(pixelRow >= 0 && pixelRow < t1.length))
        return A.ioore(t1, pixelRow);
      t1 = t1[pixelRow];
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      t2 = t1[index];
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t1[index] = (t2 | bit) >>> 0;
      t2 = type$.nullable_JSObject._as(destination.getContext("2d"));
      t1 = t2 == null ? type$.JSObject._as(t2) : t2;
      t1.save();
      t1.beginPath();
      t1.fillStyle = color;
      t2 = _this.pixelWidth;
      t3 = _this.pixelHeight;
      t1.fillRect(pixelColumn * t2, pixelRow * t3, t2, t3);
      t1.restore();
    },
    pixelIsOn$2$pixelColumn$pixelRow(pixelColumn, pixelRow) {
      var _1_0, index, bit, t1,
        _0_0 = this._wrapped$2(pixelRow, pixelColumn);
      pixelRow = _0_0._0;
      _1_0 = A.Screen__findBit(_0_0._1);
      index = _1_0._0;
      bit = B.JSInt_methods.$shl(1, _1_0._1);
      t1 = this._data;
      if (!(pixelRow >= 0 && pixelRow < t1.length))
        return A.ioore(t1, pixelRow);
      t1 = t1[pixelRow];
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return (t1[index] & bit) >>> 0 > 0;
    },
    clear$4$pixelHeight$pixelLeft$pixelTop$pixelWidth(_, pixelHeight, pixelLeft, pixelTop, pixelWidth) {
      var t1, t2, r, c, t3, bottom, right, pixelRow, _this = this;
      if (pixelWidth == null)
        pixelWidth = _this.widthInPixels - pixelLeft;
      if (pixelHeight == null)
        pixelHeight = _this.heightInPixels - pixelTop;
      _this._clearBuffer$0();
      if (pixelLeft === 0 && pixelTop === 0 && pixelWidth === _this.widthInPixels && pixelHeight === _this.heightInPixels) {
        for (t1 = _this._data, t2 = t1.length, r = 0; r < t2; ++r)
          for (c = 0; t3 = t1[r], c < t3.length; ++c) {
            t3.$flags & 2 && A.throwUnsupportedOperation(t3);
            t3[c] = 0;
          }
        t1 = _this._buffer;
        t2 = type$.nullable_JSObject._as(t1.getContext("2d"));
        if (t2 == null)
          t2 = type$.JSObject._as(t2);
        t2.save();
        t2.fillStyle = _this.backgroundColor;
        t2.fillRect(0, 0, A._asInt(t1.width), A._asInt(t1.height));
        t2.restore();
      } else {
        t1 = _this.heightInPixels;
        pixelTop = B.JSInt_methods.$mod(pixelTop, t1);
        t2 = _this.widthInPixels;
        pixelLeft = B.JSInt_methods.$mod(pixelLeft, t2);
        t3 = Math.abs(pixelHeight);
        bottom = Math.min(pixelTop + t3, t1);
        right = Math.min(pixelLeft + t3, t2);
        for (t3 = _this._buffer, r = pixelTop; r < bottom; ++r) {
          pixelRow = B.JSInt_methods.$mod(r, t1);
          for (c = pixelLeft; c < right; ++c)
            _this._setPixelOff$4(pixelRow, B.JSInt_methods.$mod(c, t2), t3, false);
        }
      }
      _this._copyBufferToCanvas$0();
    },
    clear$0(_) {
      return this.clear$4$pixelHeight$pixelLeft$pixelTop$pixelWidth(0, null, 0, 0, null);
    },
    _poke$9(pixelRow, pixelColumn, data, color, bits, mode, updateBuffer, reflected, wrap) {
      var _0_0, bitRegion, t1, t2, t3, t4, r, t5, source, t6, c, t7, destination, shift, conjunction, _this = this;
      type$.List_int._as(data);
      _this._clearBuffer$0();
      _0_0 = _this._wrapped$2(pixelRow, pixelColumn);
      pixelRow = _0_0._0;
      pixelColumn = _0_0._1;
      bitRegion = B.JSInt_methods._shlPositive$1(1, bits) - 1;
      for (t1 = type$.int, t2 = bits - 1, t3 = type$.JSArray_int, t4 = _this._buffer, r = 0; r < 8; ++r) {
        t5 = data[r];
        source = t5 & bitRegion;
        t5 = A._setArrayType([], t3);
        for (t6 = pixelRow + r, c = 0; c < bits; ++c) {
          t7 = _this.pixelIsOn$2$pixelColumn$pixelRow(pixelColumn + c, t6) ? 1 : 0;
          t5.push(B.JSInt_methods.$shl(t7, t2 - c));
        }
        destination = B.JSArray_methods.fold$1$2(t5, 0, new A.Screen__poke_closure(), t1);
        switch (mode) {
          case B.Mode_0:
            for (c = 0; c < bits; ++c) {
              t5 = pixelColumn + c;
              if ((B.JSInt_methods._shrReceiverPositive$1(source, t2 - c) & 1) > 0)
                _this._setPixelOn$5(t6, t5, color, t4, false);
              else
                _this._setPixelOff$4(t6, t5, t4, false);
            }
            break;
          case B.Mode_1:
            for (c = 0; c < bits; ++c) {
              t5 = pixelColumn + c;
              if ((B.JSInt_methods._shrReceiverPositive$1(source, t2 - c) & 1) > 0)
                _this._setPixelOff$4(t6, t5, t4, false);
              else
                _this._setPixelOn$5(t6, t5, color, t4, false);
            }
            break;
          case B.Mode_3:
            for (c = 0; c < bits; ++c) {
              shift = t2 - c;
              if ((B.JSInt_methods._shrReceiverPositive$1(source, shift) & 1) > 0 && (B.JSInt_methods.$shr(destination, shift) & 1) === 0)
                _this._setPixelOn$5(t6, pixelColumn + c, color, t4, false);
            }
            break;
          case B.Mode_2:
            for (c = 0; c < bits; ++c)
              if ((B.JSInt_methods._shrReceiverPositive$1(source, t2 - c) & 1) > 0)
                _this._setPixelOn$5(t6, pixelColumn + c, color, t4, false);
            break;
          case B.Mode_4:
            for (conjunction = source & destination, c = 0; c < bits; ++c)
              if ((B.JSInt_methods._shrReceiverPositive$1(conjunction, t2 - c) & 1) > 0)
                _this._setPixelOn$5(t6, pixelColumn + c, color, t4, false);
            break;
          case B.Mode_5:
            for (conjunction = source & destination, c = 0; c < bits; ++c)
              if ((B.JSInt_methods._shrReceiverPositive$1(conjunction, t2 - c) & 1) > 0)
                _this._setPixelOff$4(t6, pixelColumn + c, t4, false);
            break;
          case B.Mode_6:
            for (conjunction = source & destination, c = 0; c < bits; ++c)
              if ((B.JSInt_methods._shrReceiverPositive$1(conjunction, t2 - c) & 1) === 0)
                _this._setPixelOff$4(t6, pixelColumn + c, t4, false);
            break;
          case B.Mode_7:
            for (conjunction = source & destination, c = 0; c < bits; ++c) {
              t5 = pixelColumn + c;
              if ((B.JSInt_methods._shrReceiverPositive$1(conjunction, t2 - c) & 1) === 0)
                _this._setPixelOff$4(t6, t5, t4, false);
              else
                _this._setPixelOn$5(t6, t5, color, t4, false);
            }
            break;
        }
      }
      _this._copyBufferToCanvas$0();
    },
    poke8Bit$3$color$data$position(color, data, position) {
      type$.List_int._as(data);
      this._poke$9(position._0, position._1, data, color, 8, B.Mode_0, true, false, false);
    },
    shiftUp$1(pixels) {
      var t2, t3, t4, r, t5, c, t6, t7, _this = this,
        t1 = _this.heightInPixels;
      pixels = B.JSInt_methods.$mod(pixels, t1);
      for (t2 = t1 - pixels, t3 = _this._data, t4 = t3.length, r = 0; r < t2; ++r) {
        if (!(r < t4))
          return A.ioore(t3, r);
        t5 = r + pixels;
        c = 0;
        for (; t6 = t3[r], c < t6.length; ++c) {
          if (!(t5 < t4))
            return A.ioore(t3, t5);
          t7 = t3[t5];
          if (!(c < t7.length))
            return A.ioore(t7, c);
          t7 = t7[c];
          t6.$flags & 2 && A.throwUnsupportedOperation(t6);
          t6[c] = t7;
        }
      }
      for (; r < t1; ++r) {
        if (!(r < t4))
          return A.ioore(t3, r);
        c = 0;
        for (; t5 = t3[r], c < t5.length; ++c) {
          t5.$flags & 2 && A.throwUnsupportedOperation(t5);
          t5[c] = 0;
        }
      }
      _this._clearBuffer$0();
      t1 = _this._buffer;
      t3 = type$.nullable_JSObject._as(t1.getContext("2d"));
      if (t3 == null)
        t3 = type$.JSObject._as(t3);
      t3.save();
      t3.beginPath();
      t4 = _this.pixelHeight;
      t3.drawImage(_this._canvas, 0, -pixels * t4);
      t3.fillStyle = _this.backgroundColor;
      t3.fillRect(0, t2 * t4, A._asInt(t1.width), pixels * t4);
      t3.restore();
      _this._copyBufferToCanvas$0();
    },
    focus$0() {
      var t1 = this._canvas;
      type$.JSObject._as(t1.style).opacity = "1.0";
      t1.focus();
    },
    blur$0() {
      var t1 = this._canvas;
      type$.JSObject._as(t1.style).opacity = "0.5";
      t1.blur();
    }
  };
  A.Screen_closure.prototype = {
    call$0() {
      this.$this._documentHasFocus = true;
    },
    $signature: 0
  };
  A.Screen_closure0.prototype = {
    call$0() {
      this.$this._documentHasFocus = false;
    },
    $signature: 0
  };
  A.Screen_closure1.prototype = {
    call$0() {
      this.$this.focus$0();
    },
    $signature: 0
  };
  A.Screen_closure2.prototype = {
    call$0() {
      this.$this.blur$0();
    },
    $signature: 0
  };
  A.Screen__poke_closure.prototype = {
    call$2(a, b) {
      return (A._asInt(a) | A._asInt(b)) >>> 0;
    },
    $signature: 12
  };
  A.Mode.prototype = {
    _enumToString$0() {
      return "Mode." + this._name;
    }
  };
  A.State.prototype = {
    _enumToString$0() {
      return "State." + this._name;
    }
  };
  A.Terminal.prototype = {
    Terminal$17$backgroundColor$columns$container$defaultColor$fontData$isInteractive$pixelHeight$pixelWidth$rowGap$rows$scrolls$whenKeyIsPressed$whenKeyIsReleased$whenMouseEntersTerminal$whenMouseIsClicked$whenMouseIsMoved$whenMouseLeavesTerminal(backgroundColor, columns, container, defaultColor, fontData, isInteractive, pixelHeight, pixelWidth, rowGap, rows, scrolls, whenKeyIsPressed, whenKeyIsReleased, whenMouseEntersTerminal, whenMouseIsClicked, whenMouseIsMoved, whenMouseLeavesTerminal) {
      var _this = this,
        t1 = new A.Terminal_getKeyboardData(),
        t2 = _this.container;
      t2.tabIndex = -1;
      t2.onfocus = A._functionToJS0(new A.Terminal_closure(_this));
      t2.onblur = A._functionToJS0(new A.Terminal_closure0(_this));
      t2.onkeydown = A._functionToJS1(new A.Terminal_closure1(_this, whenKeyIsPressed, t1, new A.Terminal_getInputString(_this)));
      t2.onclick = A._functionToJS1(new A.Terminal_closure2(_this, new A.Terminal_getMouseData(_this), whenMouseIsClicked));
      t1 = A._functionToJS1(new A.Terminal_closure3(_this, whenKeyIsReleased, t1));
      t2.onkeyup = t1;
      A.Timer_Timer$periodic(A.Duration$(300), new A.Terminal_closure4(_this));
      _this.blur$0();
      _this.clear$0(0);
    },
    get$blur() {
      var t1 = this.__Terminal_screen_F;
      t1 === $ && A.throwLateFieldNI("screen");
      return t1.get$blur();
    },
    _terminal$_wrapped$2(row, column) {
      return new A._Record_2(B.JSInt_methods.$mod(row, this.rows), B.JSInt_methods.$mod(column, this.columns));
    },
    _hideCursor$0() {
      var _this = this,
        t1 = _this.currentPosition;
      _this._cellsToBeUpdated.add$1(0, new A.Cell(t1._row, t1._column, " ", "white"));
      _this._updateCells$0();
      _this._cursorIsShowing = false;
    },
    _updateCells$0() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, data, _this = this;
      for (t1 = _this._cellsToBeUpdated, t2 = A._LinkedHashSetIterator$(t1, t1._modifications, t1.$ti._precomputed1), t3 = _this.__Terminal_screen_F, t4 = _this._fontData, t5 = 8 + _this.rowGap, t6 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t7 = t2._collection$_current;
        if (t7 == null)
          t7 = t6._as(t7);
        t8 = t7.row;
        t9 = t7.column;
        if (t4.containsKey$1(t7.character)) {
          t10 = t4.$index(0, t7.character);
          t10.toString;
          data = t10;
        } else
          data = $.$get$Terminal__missingCharacter();
        t3 === $ && A.throwLateFieldNI("screen");
        t3.poke8Bit$3$color$data$position(t7.color, data, new A._Record_2(t8 * t5, t9 * 8));
      }
      if (t1._collection$_length > 0) {
        t1._strings = t1._nums = t1._collection$_rest = t1._first = t1._last = null;
        t1._collection$_length = 0;
        t1._modified$0();
      }
    },
    getCharacter$2$column$row(column, row) {
      var t1,
        _0_0 = this._terminal$_wrapped$2(row, column);
      row = _0_0._0;
      column = _0_0._1;
      t1 = this._cells;
      if (!(row >= 0 && row < t1.length))
        return A.ioore(t1, row);
      t1 = t1[row];
      if (!(column >= 0 && column < t1.length))
        return A.ioore(t1, column);
      return t1[column].character;
    },
    _setCharacter$3$character$column$row(character, column, row) {
      var t1,
        _0_0 = this._terminal$_wrapped$2(row, column);
      row = _0_0._0;
      column = _0_0._1;
      t1 = this._cells;
      if (!(row >= 0 && row < t1.length))
        return A.ioore(t1, row);
      t1 = t1[row];
      if (!(column >= 0 && column < t1.length))
        return A.ioore(t1, column);
      t1 = t1[column];
      t1.character = character;
      this._cellsToBeUpdated.add$1(0, t1);
    },
    scroll$0() {
      var t1, t2, t3, r, r0, c, t4, t5, _this = this;
      for (t1 = _this.rows - 1, t2 = _this.columns, t3 = _this._cells, r = 0; r < t1; r = r0)
        for (r0 = r + 1, c = 0; c < t2; ++c) {
          t4 = t3.length;
          if (!(r < t4))
            return A.ioore(t3, r);
          t5 = t3[r];
          if (!(c < t5.length))
            return A.ioore(t5, c);
          t5 = t5[c];
          if (!(r0 < t4))
            return A.ioore(t3, r0);
          t4 = t3[r0];
          if (!(c < t4.length))
            return A.ioore(t4, c);
          t4 = t4[c];
          t5.character = t4.character;
          t5.color = t4.color;
        }
      for (c = 0; c < t2; ++c) {
        if (!(t1 >= 0 && t1 < t3.length))
          return A.ioore(t3, t1);
        t4 = t3[t1];
        if (!(c < t4.length))
          return A.ioore(t4, c);
        t4 = t4[c];
        t4.character = " ";
        t4.color = "white";
      }
      t1 = _this.__Terminal_screen_F;
      t1 === $ && A.throwLateFieldNI("screen");
      t1.shiftUp$1(8 + _this.rowGap);
    },
    output$4$column$newLineAfter$row(text, column, newLineAfter, row) {
      var t2, t3, t4, t5, t6, t7, t8, _i, character, t9, t10, t11, cell, _this = this,
        t1 = row == null ? _this.currentPosition._row : row,
        _0_0 = _this._terminal$_wrapped$2(t1, column == null ? _this.currentPosition._column : column);
      t1 = _this.currentPosition;
      t2 = t1.rows;
      t1._row = B.JSInt_methods.$mod(_0_0._0, t2);
      t1.set$column(_0_0._1);
      for (t3 = text.split(""), t4 = t3.length, t5 = _this._cells, t6 = _this._cellsToBeUpdated, t7 = _this.rows - 1, t8 = _this.columns - 1, _i = 0; _i < t4; ++_i) {
        character = t3[_i];
        t9 = t1._row;
        t10 = t1._column;
        if (!(t9 >= 0 && t9 < t5.length))
          return A.ioore(t5, t9);
        t11 = t5[t9];
        if (!(t10 >= 0 && t10 < t11.length))
          return A.ioore(t11, t10);
        cell = t11[t10];
        cell.character = character;
        cell.color = "white";
        t6.add$1(0, cell);
        if (t9 === t7 && t10 === t8) {
          _this.scroll$0();
          t1._row = B.JSInt_methods.$mod(t1._row - 1, t2);
        }
        t1.set$column(t1._column + 1);
      }
      _this._updateCells$0();
    },
    output$2$newLineAfter(text, newLineAfter) {
      return this.output$4$column$newLineAfter$row(text, null, newLineAfter, null);
    },
    clear$0(_) {
      var t1, r, c, t2, _this = this,
        width = _this.columns,
        height = _this.rows;
      for (t1 = _this._cells, r = 0; r < height; ++r)
        for (c = 0; c < width; ++c) {
          if (!(r < t1.length))
            return A.ioore(t1, r);
          t2 = t1[r];
          if (!(c < t2.length))
            return A.ioore(t2, c);
          t2 = t2[c];
          t2.character = " ";
          t2.color = "white";
        }
      t1 = _this.__Terminal_screen_F;
      t1 === $ && A.throwLateFieldNI("screen");
      t2 = 8 + _this.rowGap;
      t1.clear$4$pixelHeight$pixelLeft$pixelTop$pixelWidth(0, height * t2, 0, 0 * t2, width * 8);
      t2 = _this.currentPosition;
      t2._row = 0 % t2.rows;
      t2.set$column(0);
    },
    blur$0() {
      return this.get$blur().call$0();
    }
  };
  A.Terminal_getMouseData.prototype = {
    call$1($event) {
      var t3, pixelRow, pixelColumn, row, column, character, _0_0, row0, column0,
        t1 = this.$this,
        t2 = t1.__Terminal_screen_F;
      t2 === $ && A.throwLateFieldNI("screen");
      t3 = B.JSNumber_methods.toInt$0(A._asDouble($event.offsetX));
      pixelRow = Math.max(Math.min(B.JSInt_methods.$tdiv(B.JSNumber_methods.toInt$0(A._asDouble($event.offsetY)) - 1, t2.pixelHeight), t2.heightInPixels - 1), 0);
      pixelColumn = Math.max(Math.min(B.JSInt_methods.$tdiv(t3 - 1, t2.pixelWidth), t2.widthInPixels - 1), 0);
      row = B.JSInt_methods.$tdiv(pixelRow, 8 + t1.rowGap);
      column = B.JSInt_methods._tdivFast$1(pixelColumn, 8);
      character = t1.getCharacter$2$column$row(column, row);
      _0_0 = t1._terminal$_wrapped$2(row, column);
      row0 = _0_0._0;
      column0 = _0_0._1;
      t1 = t1._cells;
      if (!(row0 >= 0 && row0 < t1.length))
        return A.ioore(t1, row0);
      t1 = t1[row0];
      if (!(column0 >= 0 && column0 < t1.length))
        return A.ioore(t1, column0);
      return new A.MouseData(row, column, character, t1[column0].color, pixelRow, pixelColumn, t2.pixelIsOn$2$pixelColumn$pixelRow(pixelColumn, pixelRow));
    },
    $signature: 13
  };
  A.Terminal_getKeyboardData.prototype = {
    call$1($event) {
      var keyCode = A._asInt($event.keyCode);
      A._asString($event.key);
      return new A.KeyboardData(keyCode);
    },
    $signature: 14
  };
  A.Terminal_getInputString.prototype = {
    call$0() {
      var t4, t5, t6, t7, t8,
        t1 = this.$this,
        t2 = t1.rows,
        t3 = t1.columns,
        position = new A.Position(t2, t3);
      position.set$index(t1._startPosition.get$index());
      t4 = A._setArrayType([], type$.JSArray_String);
      t5 = t1._endPosition;
      t6 = t5.columns;
      while (t7 = position._row, t8 = position._column, t7 * t3 + t8 < t5._row * t6 + t5._column) {
        t4.push(t1.getCharacter$2$column$row(t8, t7));
        t7 = position._row * t3 + position._column + 1;
        position._row = B.JSInt_methods.$mod(B.JSInt_methods.$tdiv(t7, t3), t2);
        position._column = B.JSInt_methods.$mod(t7, t3);
      }
      return B.JSArray_methods.join$1(t4, "");
    },
    $signature: 15
  };
  A.Terminal_closure.prototype = {
    call$0() {
      var t1 = this.$this.__Terminal_screen_F;
      t1 === $ && A.throwLateFieldNI("screen");
      t1.focus$0();
    },
    $signature: 0
  };
  A.Terminal_closure0.prototype = {
    call$0() {
      var t1 = this.$this.__Terminal_screen_F;
      t1 === $ && A.throwLateFieldNI("screen");
      t1.blur$0();
    },
    $signature: 0
  };
  A.Terminal_closure1.prototype = {
    call$1($event) {
      var t1, _1_0, t2, key;
      type$.JSObject._as($event);
      $event.preventDefault();
      t1 = this.$this;
      switch (t1._state) {
        case B.State_0:
          this.whenKeyIsPressed.call$2(t1, this.getKeyboardData.call$1($event));
          break;
        case B.State_1:
          break;
        case B.State_2:
          t1._hideCursor$0();
          $label0$1: {
            _1_0 = A._asInt($event.keyCode);
            if (13 === _1_0)
              break $label0$1;
            if (8 === _1_0) {
              t2 = t1.currentPosition;
              if (t2.get$index() > t1._startPosition.get$index()) {
                t2.set$index(t2.get$index() - 1);
                t1.output$2$newLineAfter(" ", false);
                t2.set$index(t2.get$index() - 1);
              }
              break $label0$1;
            }
            key = A._asString($event.key);
            if (key.length === 1 && t1.currentPosition.get$index() < t1._endPosition.get$index())
              t1.output$2$newLineAfter(key, false);
          }
          break;
        case B.State_3:
          break;
      }
    },
    $signature: 2
  };
  A.Terminal_closure2.prototype = {
    call$1($event) {
      type$.JSObject._as($event).preventDefault();
    },
    $signature: 2
  };
  A.Terminal_closure3.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      $event.preventDefault();
      this.whenKeyIsReleased.call$2(this.$this, this.getKeyboardData.call$1($event));
    },
    $signature: 2
  };
  A.Terminal_closure4.prototype = {
    call$1(_) {
      var t3, t4, t5,
        t1 = this.$this,
        t2 = t1.__Terminal_screen_F;
      t2 === $ && A.throwLateFieldNI("screen");
      if (t2._documentHasFocus && J.$eq$(type$.nullable_JSObject._as(type$.JSObject._as(self.document).activeElement), t2._canvas) && t1._state === B.State_2)
        if (t1._cursorIsShowing)
          t1._hideCursor$0();
        else {
          t3 = t1.currentPosition;
          t4 = t3._row;
          t3 = t3._column;
          t5 = type$.List_int._as($.$get$Terminal__cursorCharacter());
          t2.poke8Bit$3$color$data$position("white", t5, new A._Record_2(t4 * (8 + t1.rowGap), t3 * 8));
          t1._cursorIsShowing = true;
        }
    },
    $signature: 4
  };
  A.Ball.prototype = {};
  A.Paddle.prototype = {
    set$row(row) {
      this.row = A._asInt(row);
    },
    set$column(column) {
      this.column = A._asInt(column);
    }
  };
  A.Game.prototype = {
    createBall$2$column$row(column, row) {
      var t1, _, t2, t3, _this = this;
      for (t1 = _this.balls, _ = 0; t2 = t1.length, _ < t2; ++_) {
        t2 = B.JSInt_methods.$mod(_this.ballPointer + 1, t2);
        _this.ballPointer = t2;
        t2 = t1[t2];
        if (!t2.isActive) {
          t2.isActive = true;
          t2.row = row;
          t2.column = column;
          t1 = _this.rand;
          t3 = t1.nextInt$1(3);
          t2.dRow = t3 - 1;
          t3 = t1.nextInt$1(3);
          t3 = t2.dColumn = t3 - 1;
          for (; t2.dRow * t3 === 0;) {
            t2.dRow = t1.nextInt$1(3) - 1;
            t3 = t1.nextInt$1(3) - 1;
            t2.dColumn = t3;
          }
          break;
        }
      }
    },
    setupLevel$0() {
      var t1, t2, r, t3, t4, t5, t6, c, t7, t8, _this = this;
      _this.blocks = 0;
      for (t1 = _this.data, t2 = _this.terminal, r = 0; r < 30; ++r)
        for (t3 = 9 - (r - 3), t4 = r !== 0, t5 = r !== 29, t6 = r >= 3, c = 0; c < 60; ++c)
          if (!t4 || !t5 || c === 0 || c === 59) {
            if (!(r < t1.length))
              return A.ioore(t1, r);
            B.JSArray_methods.$indexSet(t1[r], c, 10);
            t2._setCharacter$3$character$column$row("\u2588", c, r);
            t2._updateCells$0();
          } else {
            t7 = c < 3 || c >= 57 || !t6 || r >= 3 + Math.min(9, 2);
            t8 = t1.length;
            if (t7) {
              if (!(r < t8))
                return A.ioore(t1, r);
              B.JSArray_methods.$indexSet(t1[r], c, 0);
              t2._setCharacter$3$character$column$row(" ", c, r);
              t2._updateCells$0();
              ++_this.blocks;
            } else {
              if (!(r < t8))
                return A.ioore(t1, r);
              B.JSArray_methods.$indexSet(t1[r], c, t3);
              if (!(r < t1.length))
                return A.ioore(t1, r);
              t7 = t1[r];
              if (!(c < t7.length))
                return A.ioore(t7, c);
              t2._setCharacter$3$character$column$row(B.JSInt_methods.toString$0(t7[c]), c, r);
              t2._updateCells$0();
            }
          }
    },
    loop$1(_) {
      var t1, t2, t3, t4, _i, ball, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, take, c, _this = this;
      for (t1 = _this.balls, t2 = t1.length, t3 = _this.terminal, t4 = _this.data, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        ball = t1[_i];
        if (ball.isActive) {
          t5 = (ball.delayCount + 1) % 3;
          ball.delayCount = t5;
          if (t5 === 0) {
            t5 = ball.row;
            t3._setCharacter$3$character$column$row(" ", ball.column, t5);
            t3._updateCells$0();
            t5 = ball.row;
            t6 = ball.dRow;
            t7 = t5 + t6;
            t8 = ball.column;
            t9 = ball.dColumn;
            t10 = t8 + t9;
            t11 = t4.length;
            if (!(t7 >= 0 && t7 < t11))
              return A.ioore(t4, t7);
            t12 = t4[t7];
            t13 = t12.length;
            if (!(t10 >= 0 && t10 < t13))
              return A.ioore(t12, t10);
            t14 = t12[t10];
            if (t14 > 0) {
              take = t14 !== 10;
              if (take)
                _this.score += t14;
              if (!(t8 >= 0 && t8 < t13))
                return A.ioore(t12, t8);
              t8 = t12[t8];
              if (t8 > 0)
                t6 = ball.dRow = t6 * -1;
              if (!(t5 >= 0 && t5 < t11))
                return A.ioore(t4, t5);
              t5 = t4[t5];
              if (!(t10 < t5.length))
                return A.ioore(t5, t10);
              t5 = t5[t10];
              if (t5 > 0)
                t9 = ball.dColumn = t9 * -1;
              if (t8 !== 0 && t5 !== 0) {
                ball.dRow = t6 * -1;
                ball.dColumn = t9 * -1;
              }
              if (take) {
                B.JSArray_methods.$indexSet(t12, t10, 0);
                t3._setCharacter$3$character$column$row(" ", t10, t7);
                t3._updateCells$0();
              }
            }
            t5 = ball.row + ball.dRow;
            ball.row = t5;
            t6 = ball.column + ball.dColumn;
            ball.column = t6;
            t3._setCharacter$3$character$column$row("o", t6, t5);
            t3._updateCells$0();
          }
        }
      }
      t1 = _this.paddle;
      t2 = t1.row;
      t3.output$4$column$newLineAfter$row("         ", t1.column - 4, false, t2);
      for (c = t1.column - 4; c <= t1.column + 4; ++c) {
        t2 = t1.row;
        if (!(t2 >= 0 && t2 < t4.length))
          return A.ioore(t4, t2);
        B.JSArray_methods.$indexSet(t4[t2], c, 0);
      }
      t2 = $.keyMap.$index(0, 37);
      t2.toString;
      if (t2)
        t1.set$column(Math.max(t1.column - 1, 5));
      t2 = $.keyMap.$index(0, 39);
      t2.toString;
      if (t2)
        t1.set$column(Math.min(t1.column + 1, 54));
      t2 = $.keyMap.$index(0, 38);
      t2.toString;
      if (t2)
        t1.set$row(Math.max(15, t1.row - 1));
      t2 = $.keyMap.$index(0, 40);
      t2.toString;
      if (t2)
        t1.set$row(Math.min(27, t1.row + 1));
      t2 = t1.row;
      t3.output$4$column$newLineAfter$row("---------", t1.column - 4, false, t2);
      for (c = t1.column - 4; t2 = t1.column, c <= t2 + 4; ++c) {
        t2 = t1.row;
        if (!(t2 >= 0 && t2 < t4.length))
          return A.ioore(t4, t2);
        B.JSArray_methods.$indexSet(t4[t2], c, 0);
      }
      for (c = t2 - 4; c <= t1.column + 4; ++c) {
        t2 = t1.row;
        if (!(t2 >= 0 && t2 < t4.length))
          return A.ioore(t4, t2);
        B.JSArray_methods.$indexSet(t4[t2], c, 10);
      }
    }
  };
  A.Game_terminal_closure.prototype = {
    call$2(_, info) {
      var t1 = info.keyCode;
      if ($.keyMap.containsKey$1(t1))
        $.keyMap.$indexSet(0, t1, true);
    },
    $signature: 5
  };
  A.Game_terminal_closure0.prototype = {
    call$2(_, info) {
      var t1 = info.keyCode;
      if ($.keyMap.containsKey$1(t1))
        $.keyMap.$indexSet(0, t1, false);
    },
    $signature: 5
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 3);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 3);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 3);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _instance_0_u(A.Screen.prototype, "get$blur", "blur$0", 1);
    _instance_1_u(A.Game.prototype, "get$loop", "loop$1", 4);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.SentinelValue, A.ListIterator, A.FixedLengthListMixin, A._Record, A.ConstantMap, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A._StackTrace, A.Closure, A.MapBase, A.LinkedHashMapCell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._BroadcastStreamController, A._AsyncCallbackEntry, A._Zone, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListBase, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.Null, A.StringBuffer, A._JSRandom, A.Cell, A.KeyboardData, A.MouseData, A.Position, A.Screen, A.Terminal, A.Ball, A.Paddle, A.Game]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A._Error, A.AssertionError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.ConcurrentModificationError]);
    _inherit(A._Record2, A._Record);
    _inherit(A._Record_2, A._Record2);
    _inherit(A.GeneralConstantMap, A.ConstantMap);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.Closure, [A.Closure0Args, A.Closure2Args, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A.Terminal_getMouseData, A.Terminal_getKeyboardData, A.Terminal_closure1, A.Terminal_closure2, A.Terminal_closure3, A.Terminal_closure4]);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inherit(A.JsConstantLinkedHashMap, A.JsLinkedHashMap);
    _inheritMany(A.Closure2Args, [A.initHooks_closure0, A.MapBase_mapToString_closure, A.Screen__poke_closure, A.Game_terminal_closure, A.Game_terminal_closure0]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A._rootHandleError_closure, A.Screen_closure, A.Screen_closure0, A.Screen_closure1, A.Screen_closure2, A.Terminal_getInputString, A.Terminal_closure, A.Terminal_closure0]);
    _inherit(A._AsyncBroadcastStreamController, A._BroadcastStreamController);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inheritMany(A._Enum, [A.Mode, A.State]);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["Null()", "~()", "Null(JSObject)", "~(~())", "~(Timer)", "~(Terminal,KeyboardData)", "@(@)", "@(@,String)", "@(String)", "Null(@)", "Null(~())", "~(Object?,Object?)", "int(int,int)", "MouseData(JSObject)", "KeyboardData(JSObject)", "String()"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSArray":{"List":["1"],"JSObject":[],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"JSObject":[],"Iterable":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"TrustedGetRuntimeType":[]},"LateError":{"Error":[]},"_Record_2":{"_Record2":[],"_Record":[]},"ConstantMap":{"Map":["1","2"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"]},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"]},"_Record2":{"_Record":[]},"NativeByteBuffer":{"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[]},"NativeByteData":{"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSObject":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeFloat64List":{"ListBase":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double"},"NativeInt16List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt32List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeInt8List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint16List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint32List":{"Uint32List":[],"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8ClampedList":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"NativeUint8List":{"ListBase":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int"},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_TimerImpl":{"Timer":[]},"_BroadcastStreamController":{"StreamController":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"]},"_LinkedHashSet":{"SetBase":["1"],"Set":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"SetBase":{"Set":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"Iterable":["1"]},"double":{"num":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_JSRandom":{"Random":[]},"Int8List":{"List":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"Iterable":["double"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"NativeTypedArray":1,"_SetBase":1}'));
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      Cell: findType("Cell"),
      Error: findType("Error"),
      Function: findType("Function"),
      JSArray_Ball: findType("JSArray<Ball>"),
      JSArray_Cell: findType("JSArray<Cell>"),
      JSArray_List_Cell: findType("JSArray<List<Cell>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Uint32List: findType("JSArray<Uint32List>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      KeyboardData: findType("KeyboardData"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      MouseData: findType("MouseData"),
      Null: findType("Null"),
      Object: findType("Object"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      Timer: findType("Timer"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      bool: findType("bool"),
      double: findType("double"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_Object: findType("Object?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_Timer: findType("~(Timer)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C__JSRandom = new A._JSRandom();
    B.C__RootZone = new A._RootZone();
    B.List_naC = A._setArrayType(makeConstList([126, 129, 165, 129, 189, 153, 129, 126]), type$.JSArray_int);
    B.List_4nh = A._setArrayType(makeConstList([126, 255, 219, 255, 195, 231, 255, 126]), type$.JSArray_int);
    B.List_wn0 = A._setArrayType(makeConstList([108, 254, 254, 254, 124, 56, 16, 0]), type$.JSArray_int);
    B.List_Z27 = A._setArrayType(makeConstList([16, 56, 124, 254, 124, 56, 16, 0]), type$.JSArray_int);
    B.List_Hfk = A._setArrayType(makeConstList([56, 124, 56, 254, 254, 124, 56, 124]), type$.JSArray_int);
    B.List_K9n = A._setArrayType(makeConstList([16, 16, 56, 124, 254, 124, 56, 124]), type$.JSArray_int);
    B.List_9TM = A._setArrayType(makeConstList([0, 0, 24, 60, 60, 24, 0, 0]), type$.JSArray_int);
    B.List_9lD = A._setArrayType(makeConstList([255, 255, 231, 195, 195, 231, 255, 255]), type$.JSArray_int);
    B.List_CXu = A._setArrayType(makeConstList([0, 60, 102, 66, 66, 102, 60, 0]), type$.JSArray_int);
    B.List_l7y = A._setArrayType(makeConstList([255, 195, 153, 189, 189, 153, 195, 255]), type$.JSArray_int);
    B.List_waE = A._setArrayType(makeConstList([15, 7, 15, 125, 204, 204, 204, 120]), type$.JSArray_int);
    B.List_wZo = A._setArrayType(makeConstList([60, 102, 102, 102, 60, 24, 126, 24]), type$.JSArray_int);
    B.List_kaL = A._setArrayType(makeConstList([63, 51, 63, 48, 48, 112, 240, 224]), type$.JSArray_int);
    B.List_1W8 = A._setArrayType(makeConstList([127, 99, 127, 99, 99, 103, 230, 192]), type$.JSArray_int);
    B.List_20U = A._setArrayType(makeConstList([153, 90, 60, 231, 231, 60, 90, 153]), type$.JSArray_int);
    B.List_8gj = A._setArrayType(makeConstList([128, 224, 248, 254, 248, 224, 128, 0]), type$.JSArray_int);
    B.List_RhK = A._setArrayType(makeConstList([2, 14, 62, 254, 62, 14, 2, 0]), type$.JSArray_int);
    B.List_byI = A._setArrayType(makeConstList([24, 60, 126, 24, 24, 126, 60, 24]), type$.JSArray_int);
    B.List_b5v = A._setArrayType(makeConstList([102, 102, 102, 102, 102, 0, 102, 0]), type$.JSArray_int);
    B.List_djz = A._setArrayType(makeConstList([127, 219, 219, 123, 27, 27, 27, 0]), type$.JSArray_int);
    B.List_dx4 = A._setArrayType(makeConstList([62, 99, 56, 108, 108, 56, 204, 120]), type$.JSArray_int);
    B.List_Vbq = A._setArrayType(makeConstList([0, 0, 0, 0, 126, 126, 126, 0]), type$.JSArray_int);
    B.List_VlP = A._setArrayType(makeConstList([24, 60, 126, 24, 126, 60, 24, 255]), type$.JSArray_int);
    B.List_1NX = A._setArrayType(makeConstList([24, 60, 126, 24, 24, 24, 24, 0]), type$.JSArray_int);
    B.List_ous = A._setArrayType(makeConstList([24, 24, 24, 24, 126, 60, 24, 0]), type$.JSArray_int);
    B.List_n23 = A._setArrayType(makeConstList([0, 24, 12, 254, 12, 24, 0, 0]), type$.JSArray_int);
    B.List_86X = A._setArrayType(makeConstList([0, 48, 96, 254, 96, 48, 0, 0]), type$.JSArray_int);
    B.List_Wxo = A._setArrayType(makeConstList([0, 0, 192, 192, 192, 254, 0, 0]), type$.JSArray_int);
    B.List_O7V = A._setArrayType(makeConstList([0, 36, 102, 255, 102, 36, 0, 0]), type$.JSArray_int);
    B.List_4UN = A._setArrayType(makeConstList([0, 24, 60, 126, 255, 255, 0, 0]), type$.JSArray_int);
    B.List_W9m = A._setArrayType(makeConstList([0, 255, 255, 126, 60, 24, 0, 0]), type$.JSArray_int);
    B.List_GIO = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_RiG = A._setArrayType(makeConstList([48, 120, 120, 48, 48, 0, 48, 0]), type$.JSArray_int);
    B.List_1uO = A._setArrayType(makeConstList([108, 108, 108, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_6mt = A._setArrayType(makeConstList([108, 108, 254, 108, 254, 108, 108, 0]), type$.JSArray_int);
    B.List_XuC = A._setArrayType(makeConstList([48, 124, 192, 120, 12, 248, 48, 0]), type$.JSArray_int);
    B.List_12o = A._setArrayType(makeConstList([0, 198, 204, 24, 48, 102, 198, 0]), type$.JSArray_int);
    B.List_ieo = A._setArrayType(makeConstList([56, 108, 56, 118, 220, 204, 118, 0]), type$.JSArray_int);
    B.List_6mk = A._setArrayType(makeConstList([96, 96, 192, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_1W6 = A._setArrayType(makeConstList([24, 48, 96, 96, 96, 48, 24, 0]), type$.JSArray_int);
    B.List_P9r = A._setArrayType(makeConstList([96, 48, 24, 24, 24, 48, 96, 0]), type$.JSArray_int);
    B.List_fUh = A._setArrayType(makeConstList([0, 102, 60, 255, 60, 102, 0, 0]), type$.JSArray_int);
    B.List_zZa = A._setArrayType(makeConstList([0, 48, 48, 252, 48, 48, 0, 0]), type$.JSArray_int);
    B.List_YCJ = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 48, 48, 96]), type$.JSArray_int);
    B.List_NTV = A._setArrayType(makeConstList([0, 0, 0, 252, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_bQo = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 48, 48, 0]), type$.JSArray_int);
    B.List_2fv = A._setArrayType(makeConstList([6, 12, 24, 48, 96, 192, 128, 0]), type$.JSArray_int);
    B.List_IQY = A._setArrayType(makeConstList([124, 198, 206, 222, 246, 230, 124, 0]), type$.JSArray_int);
    B.List_cC5 = A._setArrayType(makeConstList([48, 112, 48, 48, 48, 48, 252, 0]), type$.JSArray_int);
    B.List_XWO = A._setArrayType(makeConstList([120, 204, 12, 56, 96, 204, 252, 0]), type$.JSArray_int);
    B.List_xtt = A._setArrayType(makeConstList([120, 204, 12, 56, 12, 204, 120, 0]), type$.JSArray_int);
    B.List_R1w = A._setArrayType(makeConstList([28, 60, 108, 204, 254, 12, 30, 0]), type$.JSArray_int);
    B.List_nZr = A._setArrayType(makeConstList([252, 192, 248, 12, 12, 204, 120, 0]), type$.JSArray_int);
    B.List_sRT = A._setArrayType(makeConstList([56, 96, 192, 248, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_XkY = A._setArrayType(makeConstList([252, 204, 12, 24, 48, 48, 48, 0]), type$.JSArray_int);
    B.List_g3N = A._setArrayType(makeConstList([120, 204, 204, 120, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_JRn = A._setArrayType(makeConstList([120, 204, 204, 124, 12, 24, 112, 0]), type$.JSArray_int);
    B.List_mF8 = A._setArrayType(makeConstList([0, 48, 48, 0, 0, 48, 48, 0]), type$.JSArray_int);
    B.List_D4X = A._setArrayType(makeConstList([0, 48, 48, 0, 0, 48, 48, 96]), type$.JSArray_int);
    B.List_Pvj = A._setArrayType(makeConstList([24, 48, 96, 192, 96, 48, 24, 0]), type$.JSArray_int);
    B.List_LdV = A._setArrayType(makeConstList([0, 0, 252, 0, 0, 252, 0, 0]), type$.JSArray_int);
    B.List_9fU = A._setArrayType(makeConstList([96, 48, 24, 12, 24, 48, 96, 0]), type$.JSArray_int);
    B.List_7y4 = A._setArrayType(makeConstList([120, 204, 12, 24, 48, 0, 48, 0]), type$.JSArray_int);
    B.List_rVO = A._setArrayType(makeConstList([124, 198, 222, 222, 222, 192, 120, 0]), type$.JSArray_int);
    B.List_aHl = A._setArrayType(makeConstList([48, 120, 204, 204, 252, 204, 204, 0]), type$.JSArray_int);
    B.List_BeL = A._setArrayType(makeConstList([252, 102, 102, 124, 102, 102, 252, 0]), type$.JSArray_int);
    B.List_51J = A._setArrayType(makeConstList([60, 102, 192, 192, 192, 102, 60, 0]), type$.JSArray_int);
    B.List_3aw = A._setArrayType(makeConstList([248, 108, 102, 102, 102, 108, 248, 0]), type$.JSArray_int);
    B.List_6JT = A._setArrayType(makeConstList([254, 98, 104, 120, 104, 98, 254, 0]), type$.JSArray_int);
    B.List_dBL = A._setArrayType(makeConstList([254, 98, 104, 120, 104, 96, 240, 0]), type$.JSArray_int);
    B.List_7DH = A._setArrayType(makeConstList([60, 102, 192, 192, 206, 102, 62, 0]), type$.JSArray_int);
    B.List_85s = A._setArrayType(makeConstList([204, 204, 204, 252, 204, 204, 204, 0]), type$.JSArray_int);
    B.List_k2X = A._setArrayType(makeConstList([120, 48, 48, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_Vab = A._setArrayType(makeConstList([30, 12, 12, 12, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_TCl = A._setArrayType(makeConstList([230, 102, 108, 120, 108, 102, 230, 0]), type$.JSArray_int);
    B.List_TAc = A._setArrayType(makeConstList([240, 96, 96, 96, 98, 102, 254, 0]), type$.JSArray_int);
    B.List_Blo = A._setArrayType(makeConstList([198, 238, 254, 254, 214, 198, 198, 0]), type$.JSArray_int);
    B.List_1tn = A._setArrayType(makeConstList([198, 230, 246, 222, 206, 198, 198, 0]), type$.JSArray_int);
    B.List_lHf = A._setArrayType(makeConstList([56, 108, 198, 198, 198, 108, 56, 0]), type$.JSArray_int);
    B.List_KYZ = A._setArrayType(makeConstList([252, 102, 102, 124, 96, 96, 240, 0]), type$.JSArray_int);
    B.List_j2A = A._setArrayType(makeConstList([120, 204, 204, 204, 220, 120, 28, 0]), type$.JSArray_int);
    B.List_0zk = A._setArrayType(makeConstList([252, 102, 102, 124, 108, 102, 230, 0]), type$.JSArray_int);
    B.List_5vs = A._setArrayType(makeConstList([120, 204, 224, 112, 28, 204, 120, 0]), type$.JSArray_int);
    B.List_vVI = A._setArrayType(makeConstList([252, 180, 48, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_BKW = A._setArrayType(makeConstList([204, 204, 204, 204, 204, 204, 252, 0]), type$.JSArray_int);
    B.List_2Ml = A._setArrayType(makeConstList([204, 204, 204, 204, 204, 120, 48, 0]), type$.JSArray_int);
    B.List_kUA = A._setArrayType(makeConstList([198, 198, 198, 214, 254, 238, 198, 0]), type$.JSArray_int);
    B.List_jkq = A._setArrayType(makeConstList([198, 198, 108, 56, 56, 108, 198, 0]), type$.JSArray_int);
    B.List_2cy = A._setArrayType(makeConstList([204, 204, 204, 120, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_1Qh = A._setArrayType(makeConstList([254, 198, 140, 24, 50, 102, 254, 0]), type$.JSArray_int);
    B.List_OKT = A._setArrayType(makeConstList([120, 96, 96, 96, 96, 96, 120, 0]), type$.JSArray_int);
    B.List_hGe = A._setArrayType(makeConstList([192, 96, 48, 24, 12, 6, 2, 0]), type$.JSArray_int);
    B.List_P8p = A._setArrayType(makeConstList([120, 24, 24, 24, 24, 24, 120, 0]), type$.JSArray_int);
    B.List_sCC = A._setArrayType(makeConstList([16, 56, 108, 198, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_0yS = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 255]), type$.JSArray_int);
    B.List_BZ8 = A._setArrayType(makeConstList([48, 48, 24, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_pNB = A._setArrayType(makeConstList([0, 0, 120, 12, 124, 204, 118, 0]), type$.JSArray_int);
    B.List_aZJ = A._setArrayType(makeConstList([224, 96, 96, 124, 102, 102, 220, 0]), type$.JSArray_int);
    B.List_jcQ = A._setArrayType(makeConstList([0, 0, 120, 204, 192, 204, 120, 0]), type$.JSArray_int);
    B.List_Hxq = A._setArrayType(makeConstList([28, 12, 12, 124, 204, 204, 118, 0]), type$.JSArray_int);
    B.List_tnq = A._setArrayType(makeConstList([0, 0, 120, 204, 252, 192, 120, 0]), type$.JSArray_int);
    B.List_CZl = A._setArrayType(makeConstList([56, 108, 96, 240, 96, 96, 240, 0]), type$.JSArray_int);
    B.List_itk = A._setArrayType(makeConstList([0, 0, 118, 204, 204, 124, 12, 248]), type$.JSArray_int);
    B.List_9ZJ = A._setArrayType(makeConstList([224, 96, 108, 118, 102, 102, 230, 0]), type$.JSArray_int);
    B.List_fkA = A._setArrayType(makeConstList([48, 0, 112, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_UlQ = A._setArrayType(makeConstList([12, 0, 12, 12, 12, 204, 204, 120]), type$.JSArray_int);
    B.List_JPV = A._setArrayType(makeConstList([224, 96, 102, 108, 120, 108, 230, 0]), type$.JSArray_int);
    B.List_Uxf = A._setArrayType(makeConstList([112, 48, 48, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_N2w = A._setArrayType(makeConstList([0, 0, 204, 254, 254, 214, 198, 0]), type$.JSArray_int);
    B.List_VWB = A._setArrayType(makeConstList([0, 0, 248, 204, 204, 204, 204, 0]), type$.JSArray_int);
    B.List_Je4 = A._setArrayType(makeConstList([0, 0, 120, 204, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_uUX = A._setArrayType(makeConstList([0, 0, 220, 102, 102, 124, 96, 240]), type$.JSArray_int);
    B.List_uDL = A._setArrayType(makeConstList([0, 0, 118, 204, 204, 124, 12, 30]), type$.JSArray_int);
    B.List_M6K = A._setArrayType(makeConstList([0, 0, 220, 118, 102, 96, 240, 0]), type$.JSArray_int);
    B.List_lyT = A._setArrayType(makeConstList([0, 0, 124, 192, 120, 12, 248, 0]), type$.JSArray_int);
    B.List_knL = A._setArrayType(makeConstList([16, 48, 124, 48, 48, 52, 24, 0]), type$.JSArray_int);
    B.List_Zpy = A._setArrayType(makeConstList([0, 0, 204, 204, 204, 204, 118, 0]), type$.JSArray_int);
    B.List_HIe = A._setArrayType(makeConstList([0, 0, 204, 204, 204, 120, 48, 0]), type$.JSArray_int);
    B.List_KV8 = A._setArrayType(makeConstList([0, 0, 198, 214, 254, 254, 108, 0]), type$.JSArray_int);
    B.List_TVE = A._setArrayType(makeConstList([0, 0, 198, 108, 56, 108, 198, 0]), type$.JSArray_int);
    B.List_vtT = A._setArrayType(makeConstList([0, 0, 204, 204, 204, 124, 12, 248]), type$.JSArray_int);
    B.List_oO7 = A._setArrayType(makeConstList([0, 0, 252, 152, 48, 100, 252, 0]), type$.JSArray_int);
    B.List_ISW = A._setArrayType(makeConstList([28, 48, 48, 224, 48, 48, 28, 0]), type$.JSArray_int);
    B.List_lbM = A._setArrayType(makeConstList([24, 24, 24, 0, 24, 24, 24, 0]), type$.JSArray_int);
    B.List_AV4 = A._setArrayType(makeConstList([224, 48, 48, 28, 48, 48, 224, 0]), type$.JSArray_int);
    B.List_zA2 = A._setArrayType(makeConstList([118, 220, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_GSc = A._setArrayType(makeConstList([0, 16, 56, 108, 198, 198, 254, 0]), type$.JSArray_int);
    B.List_8VE = A._setArrayType(makeConstList([120, 204, 192, 204, 120, 24, 12, 120]), type$.JSArray_int);
    B.List_o9W = A._setArrayType(makeConstList([0, 204, 0, 204, 204, 204, 126, 0]), type$.JSArray_int);
    B.List_vjt = A._setArrayType(makeConstList([28, 0, 120, 204, 252, 192, 120, 0]), type$.JSArray_int);
    B.List_YBq = A._setArrayType(makeConstList([126, 195, 60, 6, 62, 102, 63, 0]), type$.JSArray_int);
    B.List_65u = A._setArrayType(makeConstList([204, 0, 120, 12, 124, 204, 126, 0]), type$.JSArray_int);
    B.List_IBi = A._setArrayType(makeConstList([224, 0, 120, 12, 124, 204, 126, 0]), type$.JSArray_int);
    B.List_4Qt = A._setArrayType(makeConstList([48, 48, 120, 12, 124, 204, 126, 0]), type$.JSArray_int);
    B.List_LUA = A._setArrayType(makeConstList([0, 0, 120, 192, 192, 120, 12, 56]), type$.JSArray_int);
    B.List_rRf = A._setArrayType(makeConstList([126, 195, 60, 102, 126, 96, 60, 0]), type$.JSArray_int);
    B.List_CLs = A._setArrayType(makeConstList([204, 0, 120, 204, 252, 192, 120, 0]), type$.JSArray_int);
    B.List_m5Z = A._setArrayType(makeConstList([224, 0, 120, 204, 252, 192, 120, 0]), type$.JSArray_int);
    B.List_oLW = A._setArrayType(makeConstList([204, 0, 112, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_kZ1 = A._setArrayType(makeConstList([124, 198, 56, 24, 24, 24, 60, 0]), type$.JSArray_int);
    B.List_G99 = A._setArrayType(makeConstList([224, 0, 112, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_xcL = A._setArrayType(makeConstList([198, 56, 108, 198, 254, 198, 198, 0]), type$.JSArray_int);
    B.List_lM1 = A._setArrayType(makeConstList([48, 48, 0, 120, 204, 252, 204, 0]), type$.JSArray_int);
    B.List_SBG = A._setArrayType(makeConstList([28, 0, 252, 96, 120, 96, 252, 0]), type$.JSArray_int);
    B.List_vbg = A._setArrayType(makeConstList([0, 0, 127, 12, 127, 204, 127, 0]), type$.JSArray_int);
    B.List_DU1 = A._setArrayType(makeConstList([62, 108, 204, 254, 204, 204, 206, 0]), type$.JSArray_int);
    B.List_uPA = A._setArrayType(makeConstList([120, 204, 0, 120, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_5hi = A._setArrayType(makeConstList([0, 204, 0, 120, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_yvn = A._setArrayType(makeConstList([0, 224, 0, 120, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_Cc3 = A._setArrayType(makeConstList([120, 204, 0, 204, 204, 204, 126, 0]), type$.JSArray_int);
    B.List_knf = A._setArrayType(makeConstList([0, 224, 0, 204, 204, 204, 126, 0]), type$.JSArray_int);
    B.List_9Bf = A._setArrayType(makeConstList([0, 204, 0, 204, 204, 124, 12, 248]), type$.JSArray_int);
    B.List_6NQ = A._setArrayType(makeConstList([195, 24, 60, 102, 102, 60, 24, 0]), type$.JSArray_int);
    B.List_ms8 = A._setArrayType(makeConstList([204, 0, 204, 204, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_1zV = A._setArrayType(makeConstList([24, 24, 126, 192, 192, 126, 24, 24]), type$.JSArray_int);
    B.List_Am8 = A._setArrayType(makeConstList([56, 108, 100, 240, 96, 230, 252, 0]), type$.JSArray_int);
    B.List_GNT = A._setArrayType(makeConstList([204, 204, 120, 252, 48, 252, 48, 48]), type$.JSArray_int);
    B.List_pr0 = A._setArrayType(makeConstList([248, 204, 204, 250, 198, 207, 198, 199]), type$.JSArray_int);
    B.List_Vae = A._setArrayType(makeConstList([14, 27, 24, 60, 24, 24, 216, 112]), type$.JSArray_int);
    B.List_AFx = A._setArrayType(makeConstList([28, 0, 120, 12, 124, 204, 126, 0]), type$.JSArray_int);
    B.List_aQg = A._setArrayType(makeConstList([56, 0, 112, 48, 48, 48, 120, 0]), type$.JSArray_int);
    B.List_AY6 = A._setArrayType(makeConstList([0, 28, 0, 120, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_g7Y = A._setArrayType(makeConstList([0, 28, 0, 204, 204, 204, 126, 0]), type$.JSArray_int);
    B.List_FIw = A._setArrayType(makeConstList([0, 248, 0, 248, 204, 204, 204, 0]), type$.JSArray_int);
    B.List_k7M = A._setArrayType(makeConstList([252, 0, 204, 236, 252, 220, 204, 0]), type$.JSArray_int);
    B.List_5tT = A._setArrayType(makeConstList([60, 108, 108, 62, 0, 126, 0, 0]), type$.JSArray_int);
    B.List_a2b = A._setArrayType(makeConstList([56, 108, 108, 56, 0, 124, 0, 0]), type$.JSArray_int);
    B.List_n0L = A._setArrayType(makeConstList([48, 0, 48, 96, 192, 204, 120, 0]), type$.JSArray_int);
    B.List_FmF = A._setArrayType(makeConstList([0, 0, 0, 252, 192, 192, 0, 0]), type$.JSArray_int);
    B.List_AVb = A._setArrayType(makeConstList([0, 0, 0, 252, 12, 12, 0, 0]), type$.JSArray_int);
    B.List_mCC = A._setArrayType(makeConstList([195, 198, 204, 222, 51, 102, 204, 15]), type$.JSArray_int);
    B.List_8nF = A._setArrayType(makeConstList([195, 198, 204, 219, 55, 111, 207, 3]), type$.JSArray_int);
    B.List_Vl3 = A._setArrayType(makeConstList([24, 24, 0, 24, 24, 24, 24, 0]), type$.JSArray_int);
    B.List_Vdm = A._setArrayType(makeConstList([0, 51, 102, 204, 102, 51, 0, 0]), type$.JSArray_int);
    B.List_IfQ = A._setArrayType(makeConstList([0, 204, 102, 51, 102, 204, 0, 0]), type$.JSArray_int);
    B.List_guo = A._setArrayType(makeConstList([34, 136, 34, 136, 34, 136, 34, 136]), type$.JSArray_int);
    B.List_uSN = A._setArrayType(makeConstList([85, 170, 85, 170, 85, 170, 85, 170]), type$.JSArray_int);
    B.List_UrC = A._setArrayType(makeConstList([219, 119, 219, 238, 219, 119, 219, 238]), type$.JSArray_int);
    B.List_GRm = A._setArrayType(makeConstList([24, 24, 24, 24, 24, 24, 24, 24]), type$.JSArray_int);
    B.List_Fbb = A._setArrayType(makeConstList([24, 24, 24, 24, 248, 24, 24, 24]), type$.JSArray_int);
    B.List_XKk = A._setArrayType(makeConstList([24, 24, 248, 24, 248, 24, 24, 24]), type$.JSArray_int);
    B.List_z9n = A._setArrayType(makeConstList([54, 54, 54, 54, 246, 54, 54, 54]), type$.JSArray_int);
    B.List_cac = A._setArrayType(makeConstList([0, 0, 0, 0, 254, 54, 54, 54]), type$.JSArray_int);
    B.List_DY5 = A._setArrayType(makeConstList([0, 0, 248, 24, 248, 24, 24, 24]), type$.JSArray_int);
    B.List_4oI = A._setArrayType(makeConstList([54, 54, 246, 6, 246, 54, 54, 54]), type$.JSArray_int);
    B.List_dx7 = A._setArrayType(makeConstList([54, 54, 54, 54, 54, 54, 54, 54]), type$.JSArray_int);
    B.List_ZtG = A._setArrayType(makeConstList([0, 0, 254, 6, 246, 54, 54, 54]), type$.JSArray_int);
    B.List_fwx = A._setArrayType(makeConstList([54, 54, 246, 6, 254, 0, 0, 0]), type$.JSArray_int);
    B.List_7eW = A._setArrayType(makeConstList([54, 54, 54, 54, 254, 0, 0, 0]), type$.JSArray_int);
    B.List_2R0 = A._setArrayType(makeConstList([24, 24, 248, 24, 248, 0, 0, 0]), type$.JSArray_int);
    B.List_3sC = A._setArrayType(makeConstList([0, 0, 0, 0, 248, 24, 24, 24]), type$.JSArray_int);
    B.List_25k = A._setArrayType(makeConstList([24, 24, 24, 24, 31, 0, 0, 0]), type$.JSArray_int);
    B.List_Wc3 = A._setArrayType(makeConstList([24, 24, 24, 24, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_LdK = A._setArrayType(makeConstList([0, 0, 0, 0, 255, 24, 24, 24]), type$.JSArray_int);
    B.List_mpH = A._setArrayType(makeConstList([24, 24, 24, 24, 31, 24, 24, 24]), type$.JSArray_int);
    B.List_WNc = A._setArrayType(makeConstList([0, 0, 0, 0, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_eca = A._setArrayType(makeConstList([24, 24, 24, 24, 255, 24, 24, 24]), type$.JSArray_int);
    B.List_ijO = A._setArrayType(makeConstList([24, 24, 31, 24, 31, 24, 24, 24]), type$.JSArray_int);
    B.List_JQK = A._setArrayType(makeConstList([54, 54, 54, 54, 55, 54, 54, 54]), type$.JSArray_int);
    B.List_tNW = A._setArrayType(makeConstList([54, 54, 55, 48, 63, 0, 0, 0]), type$.JSArray_int);
    B.List_qUq = A._setArrayType(makeConstList([0, 0, 63, 48, 55, 54, 54, 54]), type$.JSArray_int);
    B.List_Tts = A._setArrayType(makeConstList([54, 54, 247, 0, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_OV0 = A._setArrayType(makeConstList([0, 0, 255, 0, 247, 54, 54, 54]), type$.JSArray_int);
    B.List_Doh = A._setArrayType(makeConstList([54, 54, 55, 48, 55, 54, 54, 54]), type$.JSArray_int);
    B.List_Dof = A._setArrayType(makeConstList([0, 0, 255, 0, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_wKT = A._setArrayType(makeConstList([54, 54, 247, 0, 247, 54, 54, 54]), type$.JSArray_int);
    B.List_jyS = A._setArrayType(makeConstList([24, 24, 255, 0, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_0Uf = A._setArrayType(makeConstList([54, 54, 54, 54, 255, 0, 0, 0]), type$.JSArray_int);
    B.List_uat = A._setArrayType(makeConstList([0, 0, 255, 0, 255, 24, 24, 24]), type$.JSArray_int);
    B.List_YTB = A._setArrayType(makeConstList([0, 0, 0, 0, 255, 54, 54, 54]), type$.JSArray_int);
    B.List_cyq = A._setArrayType(makeConstList([54, 54, 54, 54, 63, 0, 0, 0]), type$.JSArray_int);
    B.List_Mnm = A._setArrayType(makeConstList([24, 24, 31, 24, 31, 0, 0, 0]), type$.JSArray_int);
    B.List_bPe = A._setArrayType(makeConstList([0, 0, 31, 24, 31, 24, 24, 24]), type$.JSArray_int);
    B.List_jJf = A._setArrayType(makeConstList([0, 0, 0, 0, 63, 54, 54, 54]), type$.JSArray_int);
    B.List_k4Z = A._setArrayType(makeConstList([54, 54, 54, 54, 255, 54, 54, 54]), type$.JSArray_int);
    B.List_VWs = A._setArrayType(makeConstList([24, 24, 255, 24, 255, 24, 24, 24]), type$.JSArray_int);
    B.List_q5K = A._setArrayType(makeConstList([24, 24, 24, 24, 248, 0, 0, 0]), type$.JSArray_int);
    B.List_IRU = A._setArrayType(makeConstList([0, 0, 0, 0, 31, 24, 24, 24]), type$.JSArray_int);
    B.List_Yds = A._setArrayType(makeConstList([255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ZN2 = A._setArrayType(makeConstList([0, 0, 0, 0, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_KUR = A._setArrayType(makeConstList([240, 240, 240, 240, 240, 240, 240, 240]), type$.JSArray_int);
    B.List_dNL = A._setArrayType(makeConstList([15, 15, 15, 15, 15, 15, 15, 15]), type$.JSArray_int);
    B.List_mUl = A._setArrayType(makeConstList([255, 255, 255, 255, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_yz2 = A._setArrayType(makeConstList([0, 0, 118, 220, 200, 220, 118, 0]), type$.JSArray_int);
    B.List_rbU = A._setArrayType(makeConstList([0, 120, 204, 248, 204, 248, 192, 192]), type$.JSArray_int);
    B.List_6uL = A._setArrayType(makeConstList([0, 252, 204, 192, 192, 192, 192, 0]), type$.JSArray_int);
    B.List_Z52 = A._setArrayType(makeConstList([0, 254, 108, 108, 108, 108, 108, 0]), type$.JSArray_int);
    B.List_qUC = A._setArrayType(makeConstList([252, 204, 96, 48, 96, 204, 252, 0]), type$.JSArray_int);
    B.List_Kds = A._setArrayType(makeConstList([0, 0, 126, 216, 216, 216, 112, 0]), type$.JSArray_int);
    B.List_MHI = A._setArrayType(makeConstList([0, 102, 102, 102, 102, 124, 96, 192]), type$.JSArray_int);
    B.List_iBX = A._setArrayType(makeConstList([0, 118, 220, 24, 24, 24, 24, 0]), type$.JSArray_int);
    B.List_5xP = A._setArrayType(makeConstList([252, 48, 120, 204, 204, 120, 48, 252]), type$.JSArray_int);
    B.List_BAN = A._setArrayType(makeConstList([56, 108, 198, 254, 198, 108, 56, 0]), type$.JSArray_int);
    B.List_6RS = A._setArrayType(makeConstList([56, 108, 198, 198, 108, 108, 238, 0]), type$.JSArray_int);
    B.List_0vD = A._setArrayType(makeConstList([28, 48, 24, 124, 204, 204, 120, 0]), type$.JSArray_int);
    B.List_vNs = A._setArrayType(makeConstList([0, 0, 126, 219, 219, 126, 0, 0]), type$.JSArray_int);
    B.List_LcX = A._setArrayType(makeConstList([6, 12, 126, 219, 219, 126, 96, 192]), type$.JSArray_int);
    B.List_4cy = A._setArrayType(makeConstList([56, 96, 192, 248, 192, 96, 56, 0]), type$.JSArray_int);
    B.List_bhq = A._setArrayType(makeConstList([120, 204, 204, 204, 204, 204, 204, 0]), type$.JSArray_int);
    B.List_jyk = A._setArrayType(makeConstList([0, 252, 0, 252, 0, 252, 0, 0]), type$.JSArray_int);
    B.List_3qH = A._setArrayType(makeConstList([48, 48, 252, 48, 48, 0, 252, 0]), type$.JSArray_int);
    B.List_IZN = A._setArrayType(makeConstList([96, 48, 24, 48, 96, 0, 252, 0]), type$.JSArray_int);
    B.List_lFs = A._setArrayType(makeConstList([24, 48, 96, 48, 24, 0, 252, 0]), type$.JSArray_int);
    B.List_KRk = A._setArrayType(makeConstList([14, 27, 27, 24, 24, 24, 24, 24]), type$.JSArray_int);
    B.List_ng5 = A._setArrayType(makeConstList([24, 24, 24, 24, 24, 216, 216, 112]), type$.JSArray_int);
    B.List_aP5 = A._setArrayType(makeConstList([48, 48, 0, 252, 0, 48, 48, 0]), type$.JSArray_int);
    B.List_1Nm = A._setArrayType(makeConstList([0, 118, 220, 0, 118, 220, 0, 0]), type$.JSArray_int);
    B.List_gNt = A._setArrayType(makeConstList([56, 108, 108, 56, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_1VZ = A._setArrayType(makeConstList([0, 0, 0, 24, 24, 0, 0, 0]), type$.JSArray_int);
    B.List_s4i = A._setArrayType(makeConstList([0, 0, 0, 0, 24, 0, 0, 0]), type$.JSArray_int);
    B.List_1qS = A._setArrayType(makeConstList([15, 12, 12, 12, 236, 108, 60, 28]), type$.JSArray_int);
    B.List_WZr = A._setArrayType(makeConstList([120, 108, 108, 108, 108, 0, 0, 0]), type$.JSArray_int);
    B.List_8BH = A._setArrayType(makeConstList([112, 24, 48, 96, 120, 0, 0, 0]), type$.JSArray_int);
    B.List_mMW = A._setArrayType(makeConstList([0, 0, 60, 60, 60, 60, 0, 0]), type$.JSArray_int);
    B.Map_SkDpb = new A.GeneralConstantMap(["\u263a", B.List_naC, "\u263b", B.List_4nh, "\u2665", B.List_wn0, "\u2666", B.List_Z27, "\u2663", B.List_Hfk, "\u2660", B.List_K9n, "\u2022", B.List_9TM, "\u25d8", B.List_9lD, "\u25cb", B.List_CXu, "\u25d9", B.List_l7y, "\u2642", B.List_waE, "\u2640", B.List_wZo, "\u266a", B.List_kaL, "\u266b", B.List_1W8, "\u263c", B.List_20U, "\u25ba", B.List_8gj, "\u25c4", B.List_RhK, "\u2195", B.List_byI, "\u203c", B.List_b5v, "\xb6", B.List_djz, "\xa7", B.List_dx4, "\u25ac", B.List_Vbq, "\u21a8", B.List_VlP, "\u2191", B.List_1NX, "\u2193", B.List_ous, "\u2192", B.List_n23, "\u2190", B.List_86X, "\u221f", B.List_Wxo, "\u2194", B.List_O7V, "\u25b2", B.List_4UN, "\u25bc", B.List_W9m, " ", B.List_GIO, "!", B.List_RiG, '"', B.List_1uO, "#", B.List_6mt, "$", B.List_XuC, "%", B.List_12o, "&", B.List_ieo, "'", B.List_6mk, "(", B.List_1W6, ")", B.List_P9r, "*", B.List_fUh, "+", B.List_zZa, ",", B.List_YCJ, "-", B.List_NTV, ".", B.List_bQo, "/", B.List_2fv, "0", B.List_IQY, "1", B.List_cC5, "2", B.List_XWO, "3", B.List_xtt, "4", B.List_R1w, "5", B.List_nZr, "6", B.List_sRT, "7", B.List_XkY, "8", B.List_g3N, "9", B.List_JRn, ":", B.List_mF8, ";", B.List_D4X, "<", B.List_Pvj, "=", B.List_LdV, ">", B.List_9fU, "?", B.List_7y4, "@", B.List_rVO, "A", B.List_aHl, "B", B.List_BeL, "C", B.List_51J, "D", B.List_3aw, "E", B.List_6JT, "F", B.List_dBL, "G", B.List_7DH, "H", B.List_85s, "I", B.List_k2X, "J", B.List_Vab, "K", B.List_TCl, "L", B.List_TAc, "M", B.List_Blo, "N", B.List_1tn, "O", B.List_lHf, "P", B.List_KYZ, "Q", B.List_j2A, "R", B.List_0zk, "S", B.List_5vs, "T", B.List_vVI, "U", B.List_BKW, "V", B.List_2Ml, "W", B.List_kUA, "X", B.List_jkq, "Y", B.List_2cy, "Z", B.List_1Qh, "[", B.List_OKT, "\\", B.List_hGe, "]", B.List_P8p, "^", B.List_sCC, "_", B.List_0yS, "`", B.List_BZ8, "a", B.List_pNB, "b", B.List_aZJ, "c", B.List_jcQ, "d", B.List_Hxq, "e", B.List_tnq, "f", B.List_CZl, "g", B.List_itk, "h", B.List_9ZJ, "i", B.List_fkA, "j", B.List_UlQ, "k", B.List_JPV, "l", B.List_Uxf, "m", B.List_N2w, "n", B.List_VWB, "o", B.List_Je4, "p", B.List_uUX, "q", B.List_uDL, "r", B.List_M6K, "s", B.List_lyT, "t", B.List_knL, "u", B.List_Zpy, "v", B.List_HIe, "w", B.List_KV8, "x", B.List_TVE, "y", B.List_vtT, "z", B.List_oO7, "{", B.List_ISW, "|", B.List_lbM, "}", B.List_AV4, "~", B.List_zA2, "\u2302", B.List_GSc, "\xc7", B.List_8VE, "\xfc", B.List_o9W, "\xe9", B.List_vjt, "\xe2", B.List_YBq, "\xe4", B.List_65u, "\xe0", B.List_IBi, "\xe5", B.List_4Qt, "\xe7", B.List_LUA, "\xea", B.List_rRf, "\xeb", B.List_CLs, "\xe8", B.List_m5Z, "\xef", B.List_oLW, "\xee", B.List_kZ1, "\xec", B.List_G99, "\xc4", B.List_xcL, "\xc5", B.List_lM1, "\xc9", B.List_SBG, "\xe6", B.List_vbg, "\xc6", B.List_DU1, "\xf4", B.List_uPA, "\xf6", B.List_5hi, "\xf2", B.List_yvn, "\xfb", B.List_Cc3, "\xf9", B.List_knf, "\xff", B.List_9Bf, "\xd6", B.List_6NQ, "\xdc", B.List_ms8, "\xa2", B.List_1zV, "\xa3", B.List_Am8, "\xa5", B.List_GNT, "\u20a7", B.List_pr0, "\u0192", B.List_Vae, "\xe1", B.List_AFx, "\xed", B.List_aQg, "\xf3", B.List_AY6, "\xfa", B.List_g7Y, "\xf1", B.List_FIw, "\xd1", B.List_k7M, "\xaa", B.List_5tT, "\xba", B.List_a2b, "\xbf", B.List_n0L, "\u2310", B.List_FmF, "\xac", B.List_AVb, "\xbd", B.List_mCC, "\xbc", B.List_8nF, "\xa1", B.List_Vl3, "\xab", B.List_Vdm, "\xbb", B.List_IfQ, "\u2591", B.List_guo, "\u2592", B.List_uSN, "\u2593", B.List_UrC, "\u2502", B.List_GRm, "\u2524", B.List_Fbb, "\u2561", B.List_XKk, "\u2562", B.List_z9n, "\u2556", B.List_cac, "\u2555", B.List_DY5, "\u2563", B.List_4oI, "\u2551", B.List_dx7, "\u2557", B.List_ZtG, "\u255d", B.List_fwx, "\u255c", B.List_7eW, "\u255b", B.List_2R0, "\u2510", B.List_3sC, "\u2514", B.List_25k, "\u2534", B.List_Wc3, "\u252c", B.List_LdK, "\u251c", B.List_mpH, "\u2500", B.List_WNc, "\u253c", B.List_eca, "\u255e", B.List_ijO, "\u255f", B.List_JQK, "\u255a", B.List_tNW, "\u2554", B.List_qUq, "\u2569", B.List_Tts, "\u2566", B.List_OV0, "\u2560", B.List_Doh, "\u2550", B.List_Dof, "\u256c", B.List_wKT, "\u2567", B.List_jyS, "\u2568", B.List_0Uf, "\u2564", B.List_uat, "\u2565", B.List_YTB, "\u2559", B.List_cyq, "\u2558", B.List_Mnm, "\u2552", B.List_bPe, "\u2553", B.List_jJf, "\u256b", B.List_k4Z, "\u256a", B.List_VWs, "\u2518", B.List_q5K, "\u250c", B.List_IRU, "\u2588", B.List_Yds, "\u2584", B.List_ZN2, "\u258c", B.List_KUR, "\u2590", B.List_dNL, "\u2580", B.List_mUl, "\u03b1", B.List_yz2, "\xdf", B.List_rbU, "\u0393", B.List_6uL, "\u03c0", B.List_Z52, "\u03a3", B.List_qUC, "\u03c3", B.List_Kds, "\xb5", B.List_MHI, "\u03c4", B.List_iBX, "\u03a6", B.List_5xP, "\u0398", B.List_BAN, "\u03a9", B.List_6RS, "\u03b4", B.List_0vD, "\u221e", B.List_vNs, "\u03c6", B.List_LcX, "\u03b5", B.List_4cy, "\u2229", B.List_bhq, "\u2261", B.List_jyk, "\xb1", B.List_3qH, "\u2265", B.List_IZN, "\u2264", B.List_lFs, "\u2320", B.List_KRk, "\u2321", B.List_ng5, "\xf7", B.List_aP5, "\u2248", B.List_1Nm, "\xb0", B.List_gNt, "\u2219", B.List_1VZ, "\xb7", B.List_s4i, "\u221a", B.List_1qS, "\u207f", B.List_WZr, "\xb2", B.List_8BH, "\u25a0", B.List_mMW], A.findType("GeneralConstantMap<String,List<int>>"));
    B.Mode_0 = new A.Mode("replace");
    B.Mode_1 = new A.Mode("inverse");
    B.Mode_2 = new A.Mode("over");
    B.Mode_3 = new A.Mode("under");
    B.Mode_4 = new A.Mode("stain");
    B.Mode_5 = new A.Mode("delete");
    B.Mode_6 = new A.Mode("maskDestination");
    B.Mode_7 = new A.Mode("maskSource");
    B.State_0 = new A.State("ready");
    B.State_1 = new A.State("awaitingKey");
    B.State_2 = new A.State("awaitingString");
    B.State_3 = new A.State("awaitingMouseClick");
    B.Type_ByteBuffer_rqD = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_9dB = A.typeLiteral("ByteData");
    B.Type_Float32List_9Kz = A.typeLiteral("Float32List");
    B.Type_Float64List_9Kz = A.typeLiteral("Float64List");
    B.Type_Int16List_s5h = A.typeLiteral("Int16List");
    B.Type_Int32List_O8Z = A.typeLiteral("Int32List");
    B.Type_Int8List_rFV = A.typeLiteral("Int8List");
    B.Type_Object_A4p = A.typeLiteral("Object");
    B.Type_Uint16List_kmP = A.typeLiteral("Uint16List");
    B.Type_Uint32List_kmP = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_04U = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_8Eb = A.typeLiteral("Uint8List");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $.keyMap = A.LinkedHashMap_LinkedHashMap$_literal([37, false, 39, false, 38, false, 40, false], type$.int, type$.bool);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_A4p));
    _lazyFinal($, "Terminal__missingCharacter", "$get$Terminal__missingCharacter", () => A.List_List$filled(8, 0, type$.int));
    _lazyFinal($, "Terminal__cursorCharacter", "$get$Terminal__cursorCharacter", () => A.List_List$filled(8, 255, type$.int));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=breakout.js.map
